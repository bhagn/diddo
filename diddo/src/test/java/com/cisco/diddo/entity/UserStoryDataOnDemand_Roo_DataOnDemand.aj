// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.cisco.diddo.entity;

import com.cisco.diddo.dao.UserStoryDao;
import com.cisco.diddo.entity.Sprint;
import com.cisco.diddo.entity.SprintDataOnDemand;
import com.cisco.diddo.entity.TeamDataOnDemand;
import com.cisco.diddo.entity.UserStory;
import com.cisco.diddo.entity.UserStoryDataOnDemand;
import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect UserStoryDataOnDemand_Roo_DataOnDemand {
    
    declare @type: UserStoryDataOnDemand: @Component;
    
    private Random UserStoryDataOnDemand.rnd = new SecureRandom();
    
    private List<UserStory> UserStoryDataOnDemand.data;
    
    @Autowired
    private SprintDataOnDemand UserStoryDataOnDemand.sprintDataOnDemand;
    
    @Autowired
    private TeamDataOnDemand UserStoryDataOnDemand.teamDataOnDemand;
    
    @Autowired
    UserStoryDao UserStoryDataOnDemand.userStoryDao;
    
    public UserStory UserStoryDataOnDemand.getNewTransientUserStory(int index) {
        UserStory obj = new UserStory();
        setBurntPoints(obj, index);
        setColor(obj, index);
        setDescription(obj, index);
        setEndDate(obj, index);
        setFriendlyID(obj, index);
        setPoints(obj, index);
        setSpillOver(obj, index);
        setSprint(obj, index);
        setStartDate(obj, index);
        setTitle(obj, index);
        setUnplanned(obj, index);
        return obj;
    }
    
    public void UserStoryDataOnDemand.setBurntPoints(UserStory obj, int index) {
        short burntPoints = new Integer(index).shortValue();
        if (burntPoints < 0) {
            burntPoints = 0;
        }
        obj.setBurntPoints(burntPoints);
    }
    
    public void UserStoryDataOnDemand.setColor(UserStory obj, int index) {
        String color = "color_" + index;
        obj.setColor(color);
    }
    
    public void UserStoryDataOnDemand.setDescription(UserStory obj, int index) {
        String description = "description_" + index;
        if (description.length() > 1024) {
            description = description.substring(0, 1024);
        }
        obj.setDescription(description);
    }
    
    public void UserStoryDataOnDemand.setEndDate(UserStory obj, int index) {
        Calendar endDate = Calendar.getInstance();
        obj.setEndDate(endDate);
    }
    
    public void UserStoryDataOnDemand.setFriendlyID(UserStory obj, int index) {
        String friendlyID = "friendlyID_" + index;
        obj.setFriendlyID(friendlyID);
    }
    
    public void UserStoryDataOnDemand.setPoints(UserStory obj, int index) {
        short points = new Integer(index).shortValue();
        if (points < 0) {
            points = 0;
        }
        obj.setPoints(points);
    }
    
    public void UserStoryDataOnDemand.setSpillOver(UserStory obj, int index) {
        Boolean spillOver = Boolean.TRUE;
        obj.setSpillOver(spillOver);
    }
    
    public void UserStoryDataOnDemand.setSprint(UserStory obj, int index) {
        Sprint sprint = sprintDataOnDemand.getRandomSprint();
        obj.setSprint(sprint);
    }
    
    public void UserStoryDataOnDemand.setStartDate(UserStory obj, int index) {
        Calendar startDate = Calendar.getInstance();
        obj.setStartDate(startDate);
    }
    
    public void UserStoryDataOnDemand.setTitle(UserStory obj, int index) {
        String title = "title_" + index;
        obj.setTitle(title);
    }
    
    public void UserStoryDataOnDemand.setUnplanned(UserStory obj, int index) {
        Boolean unplanned = Boolean.TRUE;
        obj.setUnplanned(unplanned);
    }
    
    public UserStory UserStoryDataOnDemand.getSpecificUserStory(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        UserStory obj = data.get(index);
        BigInteger id = obj.getId();
        return userStoryDao.findOne(id);
    }
    
    public UserStory UserStoryDataOnDemand.getRandomUserStory() {
        init();
        UserStory obj = data.get(rnd.nextInt(data.size()));
        BigInteger id = obj.getId();
        return userStoryDao.findOne(id);
    }
    
    public boolean UserStoryDataOnDemand.modifyUserStory(UserStory obj) {
        return false;
    }
    
    public void UserStoryDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = userStoryDao.findAll(new org.springframework.data.domain.PageRequest(from / to, to)).getContent();
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'UserStory' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<UserStory>();
        for (int i = 0; i < 10; i++) {
            UserStory obj = getNewTransientUserStory(i);
            try {
                userStoryDao.save(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            data.add(obj);
        }
    }
    
}
