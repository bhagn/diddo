// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.cisco.diddo.entity;

import com.cisco.diddo.dao.ImpedimentDao;
import com.cisco.diddo.entity.ImpedimentDataOnDemand;
import com.cisco.diddo.entity.ImpedimentIntegrationTest;
import java.math.BigInteger;
import java.util.List;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

privileged aspect ImpedimentIntegrationTest_Roo_IntegrationTest {
    
    declare @type: ImpedimentIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: ImpedimentIntegrationTest: @ContextConfiguration(locations = "classpath:/META-INF/spring/applicationContext*.xml");
    
    @Autowired
    private ImpedimentDataOnDemand ImpedimentIntegrationTest.dod;
    
    @Autowired
    ImpedimentDao ImpedimentIntegrationTest.impedimentDao;
    
    @Test
    public void ImpedimentIntegrationTest.testCount() {
        Assert.assertNotNull("Data on demand for 'Impediment' failed to initialize correctly", dod.getRandomImpediment());
        long count = impedimentDao.count();
        Assert.assertTrue("Counter for 'Impediment' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void ImpedimentIntegrationTest.testFind() {
        Impediment obj = dod.getRandomImpediment();
        Assert.assertNotNull("Data on demand for 'Impediment' failed to initialize correctly", obj);
        BigInteger id = obj.getId();
        Assert.assertNotNull("Data on demand for 'Impediment' failed to provide an identifier", id);
        obj = impedimentDao.findOne(id);
        Assert.assertNotNull("Find method for 'Impediment' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'Impediment' returned the incorrect identifier", id, obj.getId());
    }
    
    @Test
    public void ImpedimentIntegrationTest.testFindAll() {
        Assert.assertNotNull("Data on demand for 'Impediment' failed to initialize correctly", dod.getRandomImpediment());
        long count = impedimentDao.count();
        Assert.assertTrue("Too expensive to perform a find all test for 'Impediment', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<Impediment> result = impedimentDao.findAll();
        Assert.assertNotNull("Find all method for 'Impediment' illegally returned null", result);
        Assert.assertTrue("Find all method for 'Impediment' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void ImpedimentIntegrationTest.testFindEntries() {
        Assert.assertNotNull("Data on demand for 'Impediment' failed to initialize correctly", dod.getRandomImpediment());
        long count = impedimentDao.count();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<Impediment> result = impedimentDao.findAll(new org.springframework.data.domain.PageRequest(firstResult / maxResults, maxResults)).getContent();
        Assert.assertNotNull("Find entries method for 'Impediment' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'Impediment' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void ImpedimentIntegrationTest.testSave() {
        Assert.assertNotNull("Data on demand for 'Impediment' failed to initialize correctly", dod.getRandomImpediment());
        Impediment obj = dod.getNewTransientImpediment(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'Impediment' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'Impediment' identifier to be null", obj.getId());
        impedimentDao.save(obj);
        Assert.assertNotNull("Expected 'Impediment' identifier to no longer be null", obj.getId());
    }
    
    @Test
    public void ImpedimentIntegrationTest.testDelete() {
        Impediment obj = dod.getRandomImpediment();
        Assert.assertNotNull("Data on demand for 'Impediment' failed to initialize correctly", obj);
        BigInteger id = obj.getId();
        Assert.assertNotNull("Data on demand for 'Impediment' failed to provide an identifier", id);
        obj = impedimentDao.findOne(id);
        impedimentDao.delete(obj);
        Assert.assertNull("Failed to remove 'Impediment' with identifier '" + id + "'", impedimentDao.findOne(id));
    }
    
}
