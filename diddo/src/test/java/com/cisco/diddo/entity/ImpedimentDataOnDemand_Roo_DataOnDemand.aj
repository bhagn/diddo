// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.cisco.diddo.entity;

import com.cisco.diddo.dao.ImpedimentDao;
import com.cisco.diddo.entity.Impediment;
import com.cisco.diddo.entity.ImpedimentDataOnDemand;
import com.cisco.diddo.entity.Sprint;
import com.cisco.diddo.entity.SprintDataOnDemand;
import com.cisco.diddo.entity.User;
import com.cisco.diddo.entity.UserDataOnDemand;
import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ImpedimentDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ImpedimentDataOnDemand: @Component;
    
    private Random ImpedimentDataOnDemand.rnd = new SecureRandom();
    
    private List<Impediment> ImpedimentDataOnDemand.data;
    
    @Autowired
    private SprintDataOnDemand ImpedimentDataOnDemand.sprintDataOnDemand;
    
    @Autowired
    private UserDataOnDemand ImpedimentDataOnDemand.userDataOnDemand;
    
    @Autowired
    ImpedimentDao ImpedimentDataOnDemand.impedimentDao;
    
    public Impediment ImpedimentDataOnDemand.getNewTransientImpediment(int index) {
        Impediment obj = new Impediment();
        setClosed(obj, index);
        setDescription(obj, index);
        setSprint(obj, index);
        setSubmittedDate(obj, index);
        setSubmitter(obj, index);
        return obj;
    }
    
    public void ImpedimentDataOnDemand.setClosed(Impediment obj, int index) {
        Boolean closed = Boolean.TRUE;
        obj.setClosed(closed);
    }
    
    public void ImpedimentDataOnDemand.setDescription(Impediment obj, int index) {
        String description = "description_" + index;
        if (description.length() > 1024) {
            description = description.substring(0, 1024);
        }
        obj.setDescription(description);
    }
    
    public void ImpedimentDataOnDemand.setSprint(Impediment obj, int index) {
        Sprint sprint = sprintDataOnDemand.getRandomSprint();
        obj.setSprint(sprint);
    }
    
    public void ImpedimentDataOnDemand.setSubmittedDate(Impediment obj, int index) {
        Calendar submittedDate = Calendar.getInstance();
        obj.setSubmittedDate(submittedDate);
    }
    
    public void ImpedimentDataOnDemand.setSubmitter(Impediment obj, int index) {
        User submitter = userDataOnDemand.getRandomUser();
        obj.setSubmitter(submitter);
    }
    
    public Impediment ImpedimentDataOnDemand.getSpecificImpediment(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Impediment obj = data.get(index);
        BigInteger id = obj.getId();
        return impedimentDao.findOne(id);
    }
    
    public Impediment ImpedimentDataOnDemand.getRandomImpediment() {
        init();
        Impediment obj = data.get(rnd.nextInt(data.size()));
        BigInteger id = obj.getId();
        return impedimentDao.findOne(id);
    }
    
    public boolean ImpedimentDataOnDemand.modifyImpediment(Impediment obj) {
        return false;
    }
    
    public void ImpedimentDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = impedimentDao.findAll(new org.springframework.data.domain.PageRequest(from / to, to)).getContent();
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Impediment' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Impediment>();
        for (int i = 0; i < 10; i++) {
            Impediment obj = getNewTransientImpediment(i);
            try {
                impedimentDao.save(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            data.add(obj);
        }
    }
    
}
