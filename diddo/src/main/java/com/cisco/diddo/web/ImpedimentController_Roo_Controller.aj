// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.cisco.diddo.web;

import com.cisco.diddo.dao.ImpedimentDao;
import com.cisco.diddo.dao.SprintDao;
import com.cisco.diddo.dao.UserDao;
import com.cisco.diddo.entity.Impediment;
import com.cisco.diddo.web.ImpedimentController;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect ImpedimentController_Roo_Controller {
    
    @Autowired
    ImpedimentDao ImpedimentController.impedimentDao;
    
    @Autowired
    SprintDao ImpedimentController.sprintDao;
    
    @Autowired
    UserDao ImpedimentController.userDao;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String ImpedimentController.create(@Valid Impediment impediment, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, impediment);
            return "impediments/create";
        }
        uiModel.asMap().clear();
        impedimentDao.save(impediment);
        return "redirect:/impediments/" + encodeUrlPathSegment(impediment.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String ImpedimentController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Impediment());
        List<String[]> dependencies = new ArrayList<String[]>();
        if (sprintDao.count() == 0) {
            dependencies.add(new String[] { "sprint", "sprints" });
        }
        if (userDao.count() == 0) {
            dependencies.add(new String[] { "user", "users" });
        }
        uiModel.addAttribute("dependencies", dependencies);
        return "impediments/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String ImpedimentController.show(@PathVariable("id") BigInteger id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("impediment", impedimentDao.findOne(id));
        uiModel.addAttribute("itemId", id);
        return "impediments/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String ImpedimentController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("impediments", impedimentDao.findAll(new org.springframework.data.domain.PageRequest(firstResult / sizeNo, sizeNo)).getContent());
            float nrOfPages = (float) impedimentDao.count() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("impediments", impedimentDao.findAll());
        }
        addDateTimeFormatPatterns(uiModel);
        return "impediments/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String ImpedimentController.update(@Valid Impediment impediment, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, impediment);
            return "impediments/update";
        }
        uiModel.asMap().clear();
        impedimentDao.save(impediment);
        return "redirect:/impediments/" + encodeUrlPathSegment(impediment.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String ImpedimentController.updateForm(@PathVariable("id") BigInteger id, Model uiModel) {
        populateEditForm(uiModel, impedimentDao.findOne(id));
        return "impediments/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String ImpedimentController.delete(@PathVariable("id") BigInteger id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Impediment impediment = impedimentDao.findOne(id);
        impedimentDao.delete(impediment);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/impediments";
    }
    
    void ImpedimentController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("impediment_submitteddate_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    void ImpedimentController.populateEditForm(Model uiModel, Impediment impediment) {
        uiModel.addAttribute("impediment", impediment);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("sprints", sprintDao.findAll());
        uiModel.addAttribute("users", userDao.findAll());
    }
    
    String ImpedimentController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
