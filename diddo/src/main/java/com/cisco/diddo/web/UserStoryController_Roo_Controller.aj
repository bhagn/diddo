// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.cisco.diddo.web;

import com.cisco.diddo.dao.SprintDao;
import com.cisco.diddo.dao.TeamDao;
import com.cisco.diddo.dao.UserStoryDao;
import com.cisco.diddo.entity.UserStory;
import com.cisco.diddo.web.UserStoryController;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect UserStoryController_Roo_Controller {
    
    /*@Autowired
    UserStoryDao UserStoryController.userStoryDao;*/
    
    @Autowired
    SprintDao UserStoryController.sprintDao;
    
    @Autowired
    TeamDao UserStoryController.teamDao;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String UserStoryController.create(@Valid UserStory userStory, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, userStory);
            return "userstorys/create";
        }
        uiModel.asMap().clear();
        userStoryDao.save(userStory);
        return "redirect:/userstorys/" + encodeUrlPathSegment(userStory.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String UserStoryController.createForm(Model uiModel) {
        populateEditForm(uiModel, new UserStory());
        List<String[]> dependencies = new ArrayList<String[]>();
        if (sprintDao.count() == 0) {
            dependencies.add(new String[] { "sprint", "sprints" });
        }
        uiModel.addAttribute("dependencies", dependencies);
        return "userstorys/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String UserStoryController.show(@PathVariable("id") BigInteger id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("userstory", userStoryDao.findOne(id));
        uiModel.addAttribute("itemId", id);
        return "userstorys/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String UserStoryController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("userstorys", userStoryDao.findAll(new org.springframework.data.domain.PageRequest(firstResult / sizeNo, sizeNo)).getContent());
            float nrOfPages = (float) userStoryDao.count() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("userstorys", userStoryDao.findAll());
        }
        addDateTimeFormatPatterns(uiModel);
        return "userstorys/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String UserStoryController.update(@Valid UserStory userStory, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, userStory);
            return "userstorys/update";
        }
        uiModel.asMap().clear();
        userStoryDao.save(userStory);
        return "redirect:/userstorys/" + encodeUrlPathSegment(userStory.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String UserStoryController.updateForm(@PathVariable("id") BigInteger id, Model uiModel) {
        populateEditForm(uiModel, userStoryDao.findOne(id));
        return "userstorys/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String UserStoryController.delete(@PathVariable("id") BigInteger id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        UserStory userStory = userStoryDao.findOne(id);
        userStoryDao.delete(userStory);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/userstorys";
    }
    
    void UserStoryController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("userStory_startdate_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("userStory_enddate_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    void UserStoryController.populateEditForm(Model uiModel, UserStory userStory) {
        uiModel.addAttribute("userStory", userStory);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("sprints", sprintDao.findAll());
        uiModel.addAttribute("teams", teamDao.findAll());
    }
    
    String UserStoryController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
